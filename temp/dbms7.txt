{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Chit No: 7 SPPU DBMS LAB Stored Procedure : create stored procedure to calculate fine of students.\
1. Borrower (Roll_no, Name, DateofIssue, NameofBook, Status)\
2. Fine(Roll_no,Date,Amt)\
\uc0\u61623  Accept Roll_no and Name of Book from user.\
\uc0\u61623  Check the number of days (from date of issue).\
\uc0\u61623  If days are between 15 to 30 then fine amount will be Rs. 5 per day.\
\uc0\u61623  If no. of days > 30, per day fine will be Rs 50 per day and for days less than 30, Rs. 5per day.\
\uc0\u61623  After submitting the book, status will change from I to R.\
\uc0\u61623  If condition of fine is true, then details will be stored into fine table.\
\uc0\u61623  Also handles the exception by named exception handler\
\
 create database dbms2;\
 use dbms2;\
\
drop database dbms2;\
-- Change the delimiter to define the procedure as a single block\
\
-- Create Borrower table\
CREATE TABLE IF NOT EXISTS Borrower (\
    Roll_no INT PRIMARY KEY,\
    Name VARCHAR(100),\
    DateofIssue DATE,\
    NameofBook VARCHAR(100),\
    Status CHAR(1)  -- 'I' for issued, 'R' for returned\
);\
\
-- Create Fine table\
CREATE TABLE IF NOT EXISTS Fine (\
    Roll_no INT,\
    Date DATE,\
    Amt INT,\
    FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no)\
);\
\
-- Sample data (optional)\
INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status)\
VALUES \
    (101, 'Alice', '2023-09-01', 'SQL Fundamentals', 'I'),\
    (102, 'Bob', '2023-10-01', 'Database Design', 'I'),\
    (103, 'Charlie', '2023-11-01', 'Advanced SQL', 'I');\
DELIMITER $$\
\
-- Create CalculateFine stored procedure\
CREATE PROCEDURE CalculateFine(\
    IN p_Roll_no INT,\
    IN p_NameofBook VARCHAR(100)\
)\
BEGIN\
    DECLARE v_DateofIssue DATE;\
    DECLARE v_CurrentDate DATE;\
    DECLARE v_DaysOverdue INT;\
    DECLARE v_FineAmount INT DEFAULT 0;\
    DECLARE v_Status CHAR(1);\
\
    -- Error handler\
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION \
    BEGIN\
        SELECT 'An error occurred while processing the fine calculation.';\
    END;\
\
    SET v_CurrentDate = CURDATE();\
\
    -- Get DateofIssue and Status for the book\
    SELECT DateofIssue, Status INTO v_DateofIssue, v_Status\
    FROM Borrower\
    WHERE Roll_no = p_Roll_no AND NameofBook = p_NameofBook;\
\
    -- Check if book is still issued\
    IF v_Status = 'I' THEN\
        SET v_DaysOverdue = DATEDIFF(v_CurrentDate, v_DateofIssue);\
\
        -- Calculate fine\
        IF v_DaysOverdue > 15 AND v_DaysOverdue <= 30 THEN\
            SET v_FineAmount = (v_DaysOverdue - 15) * 5;\
        ELSEIF v_DaysOverdue > 30 THEN\
            SET v_FineAmount = (15 * 5) + ((v_DaysOverdue - 30) * 50);\
        END IF;\
\
        -- Mark book as returned\
        UPDATE Borrower\
        SET Status = 'R'\
        WHERE Roll_no = p_Roll_no AND NameofBook = p_NameofBook;\
\
        -- Insert fine record if applicable\
        IF v_FineAmount > 0 THEN\
            INSERT INTO Fine (Roll_no, Date, Amt)\
            VALUES (p_Roll_no, v_CurrentDate, v_FineAmount);\
        END IF;\
    ELSE\
        SELECT 'Book is already returned.' AS Message;\
    END IF;\
END $$\
\
-- Reset the delimiter\
DELIMITER ;\
\
-- Test procedure by calling it\
CALL CalculateFine(101, 'SQL Fundamentals');\
\
-- Check the Borrower and Fine tables for results\
SELECT * FROM Borrower;\
SELECT * FROM Fine;\
\
}